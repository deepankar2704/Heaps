  class info{
        
        public:
        int data;
        int row;
        int col;
        
        info(int val,int r, int c)
        {
            data=val;
            row=r;
            col=c;
        }
    };
    
    class compare{
        
        public:
        bool operator()(info*a,info*b)
        {
            return a->data>b->data;
        }
    };
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int k)
    {
        priority_queue<info*,vector<info*>,compare>pq;
        
        // insert first element of an array
        for(int i=0; i<k; i++)
        {
            info*temp=new info(arr[i][0],i,0);
            pq.push(temp);
        }
        
        vector<int>ans;
        int n=arr[0].size();
        
        while(!pq.empty())
        {
            info*temp=pq.top();
            int topElement=temp->data;
            int topRow=temp->row;
            int topCol=temp->col;
            pq.pop();
            
            ans.push_back(topElement);
            
            if(topCol+1<n)
            {
                info*newInfo=new info(arr[topRow][topCol+1],topRow,topCol+1);
                pq.push(newInfo);
            }
        }
        return ans;
    }
